--------------------------------test_cases_1:------------------------
- Energy needed for a successful path is at least 36. 
- Should be able to connect to at least 0 -> 4 -> 1 or 0 -> 1 -> 4 with 35 energy.

This test runs through a regular seeded plot, where the calculated min energy needed to 
find a solution is at least 36.

    graph = Graph(
                seed=42069,
                visual_delay=0.05,
                starting_node_index=0,
                path_printing=True, 
                optimal_update=False,
                path_update=False,
                input_file=f"{TESTS_DIRECTORY}/1.csv",
                output_file="solution.csv"
                )

    graph.run(num_points=6, 
        find_min=True,
        create_random_data=False, 
        starting_energy=34,
        max_energy=36,
        x_lower_limit=0, x_upper_limit=3,
        y_lower_limit=0, y_upper_limit=3,
        z_lower_limit=0, z_upper_limit=3,
        energy_lower_limit=10, energy_upper_limit=20,
        )

Node Number,X,Y,Z,Energy
0,7.0,7.0,-8.0,0
1,7.0,4.0,-4.0,3
2,1.0,-3.0,10.0,7
3,-3.0,-6.0,9.0,8
4,-7.0,-0.0,-5.0,3


-----------------------------------test_cases_2:------------------------------------
This test asserts how the gradient system works, 
the cost to move is just above 12 based on the Euclidean distance calculation. 
With our gradient scalar, it is amplified for uphill movement. 
This results in a greater energy requirement of at least 22 energy to start.

    graph = Graph(
                seed=42069,
                visual_delay=0.5,
                starting_node_index=0,
                path_printing=True, 
                optimal_update=False,
                path_update=False,
                input_file=f"{TESTS_DIRECTORY}/2.csv",
                output_file="solution.csv"
                )

    graph.run(num_points=6, 
        find_min=True,
        create_random_data=False, 
        starting_energy=20,
        max_energy=23,
        x_lower_limit=0, x_upper_limit=3,
        y_lower_limit=0, y_upper_limit=3,
        z_lower_limit=0, z_upper_limit=3,
        energy_lower_limit=10, energy_upper_limit=20,
        )

Node Number,X,Y,Z,Energy
0,0,0,0,0
1,5,5,10,0


-----------------------------test_cases_3:----------------------------------
This is the inverse of test_cases_2, 
showing how little energy is needed to descend a gradient.

    graph = Graph(
                seed=42069,
                visual_delay=0.5,
                starting_node_index=0,
                path_printing=True, 
                optimal_update=False,
                path_update=False,
                input_file=f"{TESTS_DIRECTORY}/3.csv",
                output_file="solution.csv"
                )

    graph.run(num_points=6, 
        find_min=True,
        create_random_data=False, 
        starting_energy=1,
        max_energy=23,
        x_lower_limit=0, x_upper_limit=3,
        y_lower_limit=0, y_upper_limit=3,
        z_lower_limit=0, z_upper_limit=3,
        energy_lower_limit=10, energy_upper_limit=20,
        )

Node Number,X,Y,Z,Energy
0,5,5,10,0
1,0,0,0,0

--------------------------------test_cases_4:------------------------
This test involves showcasing same plane, no gradient, calculation. 
The Euclidean distance of the same plane is equal to the energy cost (cost == 7.071)
The min energy required to traverse is 8.

    graph = Graph(
                seed=42069,
                visual_delay=1,
                starting_node_index=0,
                path_printing=True, 
                optimal_update=False,
                path_update=False,
                input_file=f"{TESTS_DIRECTORY}/4.csv",
                output_file="solution.csv"
                )

    graph.run(num_points=6, 
        find_min=True,
        create_random_data=False, 
        starting_energy=1,
        max_energy=23,
        x_lower_limit=0, x_upper_limit=3,
        y_lower_limit=0, y_upper_limit=3,
        z_lower_limit=0, z_upper_limit=3,
        energy_lower_limit=10, energy_upper_limit=20,
        )

Node Number,X,Y,Z,Energy
0,5,5,5,0
1,0,0,5,0

------------------------------test_cases_5----------------------------------
This method involves too much energy gain at each node,
 and a high starting energy, resulting in effectively a worse case 
 scenario brute force method.

    graph = Graph(
                seed=42069,
                visual_delay=0.05,
                starting_node_index=0,
                path_printing=True, 
                optimal_update=False,
                path_update=False,
                input_file=f"{TESTS_DIRECTORY}/5.csv",
                output_file="solution.csv"
                )

    graph.run(num_points=6, 
        find_min=True,
        create_random_data=True, 
        starting_energy=25,
        x_lower_limit=0, x_upper_limit=3,
        y_lower_limit=0, y_upper_limit=3,
        z_lower_limit=0, z_upper_limit=3,
        energy_lower_limit=10, energy_upper_limit=20,
        max_energy=50)

Node Number,X,Y,Z,Energy
0,0,2,1,0
1,8,7,0,5
2,3,10,0,5
3,1,3,2,1
4,9,3,3,1
5,10,5,2,1


------------------------------test_cases_6----------------------------------
    graph = Graph(
                seed=81285,
                visual_delay=0.00,
                starting_node_index=0,
                path_printing=False, 
                optimal_update=True,
                path_update=False,
                #input_file=f"{TESTS_DIRECTORY}/6.csv",
                output_file="solution.csv"
                )

    graph.run(num_points=13, 
        find_min=True,
        create_random_data=True, 
        starting_energy=1,
        max_energy=50,
        x_lower_limit=0, x_upper_limit=3,
        y_lower_limit=0, y_upper_limit=3,
        z_lower_limit=0, z_upper_limit=3,
        energy_lower_limit=1, energy_upper_limit=3,
        )

Node Number,X,Y,Z,Energy
0,2,3,2,0
1,1,3,1,1
2,1,1,0,3
3,2,1,0,1
4,3,2,1,2
5,0,3,1,2
6,3,3,1,2
7,3,1,2,1
8,3,1,2,1
9,3,3,2,1
10,2,3,3,3
11,3,2,2,2
12,1,1,2,3